name: Build & Blue-Green Deploy

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}        # org/repo
  IMAGE_REPO: ghcr.io/${{ github.repository }} # ghcr.io/org/repo

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write    # GHCR 푸시 권한
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract short SHA
        id: vars
        run: echo "sha_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ steps.vars.outputs.sha_short }}
            ${{ env.IMAGE_REPO }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH & Deploy (Blue-Green)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }} # EC2의 퍼블릭 IP 또는 도메인
          username: ${{ secrets.SSH_USER }} # ec2-user
          key: ${{ secrets.SSH_KEY }} # pem 키페어
          script: |
            set -e
            # 1) 배포 디렉토리 존재/갱신
            if [ ! -d "/srv/app/.git" ]; then
              sudo mkdir -p /srv/app
              sudo chown -R ec2-user:ec2-user /srv/app
              git clone https://github.com/${{ github.repository }} /srv/app
            else
              cd /srv/app
              git fetch --all
              git reset --hard origin/main
            fi

            # 2) Compose/스크립트 실행 권한 부여
            cd /srv/app/deploy
            chmod +x scripts/*.sh

            # 3) 서버 .env 준비(최초 1회만)
            if [ ! -f "/srv/app/.env" ] && [ -f "./.env.template" ]; then
              cp .env.template /srv/app/.env
              echo "[WARN] Fill /srv/app/.env with real secrets!"
            fi

            # 4) 블루/그린 배포 실행 (이미지 태그 = 짧은 SHA)
            export IMAGE_REPO=${{ env.IMAGE_REPO }}
            export IMAGE_TAG=${{ needs.build-and-push.outputs.sha_short || github.sha }}
            # 위 outputs 전파가 안 되는 경우를 대비해 github.sha 사용

            # short sha 재계산(원격)
            IMAGE_TAG=$(echo "${IMAGE_TAG}" | cut -c1-7)

            cd /srv/app/deploy/scripts
            ./deploy.sh
