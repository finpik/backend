server:
  port: ${PORT:8080}

spring:
  application:
    name: fin-pik

  graphql:
    graphiql:
      enabled: true

  #Kakao Oauth2 로그인 정보
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID:089246de56563808ef86e863b201a1d9}
            #client-secret: MmDh2LcqW9fYUyvm5yGCEBJpQUz9z6Ty
            redirect-uri: ${KAKAO_REDIRECT_URI:https://a4ba7f0d8b33.ngrok-free.app/login/oauth2/code/kakao}
            authorization-grant-type: authorization_code
            scope:
              - account_email
            client-name: ${KAKAO_CLIENT_NAME:Kakao}
        provider:
          kakao:
            authorization-uri: ${KAKAO_AUTHORIZATION_URI:https://kauth.kakao.com/oauth/authorize}
            token-uri: ${KAKAO_TOKEN_URI:https://kauth.kakao.com/oauth/token}
            user-info-uri: ${KAKAO_USER_INFO_URI:https://kapi.kakao.com/v2/user/me}
            user-name-attribute: id

  datasource:
    url: ${DATABASE_URL:jdbc:mysql://localhost:3306/loanpick?serverTimezone=Asia/Seoul&characterEncoding=UTF-8}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DATABASE_USERNAME:user}
    password: ${DATABASE_PASSWORD:password}

#  #h2
#  datasource:
#    url: jdbc:h2:mem:testdb
#    driver-class-name: org.h2.Driver
#    username: sa
#    password:
#  h2:
#    console:
#      enabled: true
#      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: update    # create, update, none 등
    show-sql: true
    database-platform: org.hibernate.dialect.MySQL8Dialect
  #redis
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
  cache:
    type: none

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        enable.idempotence: true # acks 자동으로 all
    consumer:
      group-id: loan-recommender
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      concurrency: 3


#Log
logging:
  level:
    org.springframework.security.oauth2.client: DEBUG
    org.springframework.security.oauth2.client.web: DEBUG
    org.springframework.security.web.authentication: DEBUG

fin-pik:
  jwt:
    secretKey: ${JWT_SECRET_KEY:c3ByaW5nLWp3dC1zZWNyZXQtbG9uZy1iYXNlNjQtZW5jb2RlZC1rZXktMTIzNDU2Nzg5}
  kafka:
    dlqLogFileName: ${KAFKA_DLQ_FILE_NAME:failed-kafka-messages.log}
