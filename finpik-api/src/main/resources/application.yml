server:
  port: ${PORT}

spring:
  application:
    name: fin-pik

  graphql:
    graphiql:
      enabled: true

  #Kakao Oauth2 로그인 정보
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            #client-secret: MmDh2LcqW9fYUyvm5yGCEBJpQUz9z6Ty
            redirect-uri: ${KAKAO_REDIRECT_URI}
            authorization-grant-type: authorization_code
            scope:
              - account_email
            client-name: ${KAKAO_CLIENT_NAME}
        provider:
          kakao:
            authorization-uri: ${KAKAO_AUTHORIZATION_URI}
            token-uri: ${KAKAO_TOKEN_URI}
            user-info-uri: ${KAKAO_USER_INFO_URI}
            user-name-attribute: id

  datasource:
    url: ${DATABASE_URL}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}

  #  #h2
  #  datasource:
  #    url: jdbc:h2:mem:testdb
  #    driver-class-name: org.h2.Driver
  #    username: sa
  #    password:
  #  h2:
  #    console:
  #      enabled: true
  #      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: update    # create, update, none 등
    show-sql: true
    database-platform: org.hibernate.dialect.MySQL8Dialect
  #redis
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
  cache:
    type: none

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        enable.idempotence: true # acks 자동으로 all
    consumer:
      group-id: loan-recommender
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      auto-startup: ${SPRING_KAFKA_LISTENER_AUTO_STARTUP:false}
      concurrency: 3
    admin:
      auto-create: ${SPRING_KAFKA_ADMIN_AUTO_CREATE:false}
      fail-fast: ${SPRING_KAFKA_ADMIN_FAIL_FAST:false}


#Log
logging:
  level:
    org.springframework.security.oauth2.client: debug
    org.springframework.security.oauth2.client.web: debug
    org.springframework.security.web.authentication: debug
    org.apache.kafka: error
    org.apache.kafka.clients: warn
    org.springframework.kafka: error
    org.springframework.kafka.listener: warn
    org.springframework.security: info

fin-pik:
  jwt:
    secretKey: ${JWT_SECRET_KEY}
  kafka:
    dlqLogFileName: ${KAFKA_DLQ_FILE_NAME}
