plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'java-library'
    id 'jacoco'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

group = 'finpik'
version = '0.0.1-SNAPSHOT'

subprojects {
    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "checkstyle"
    apply plugin: "com.diffplug.spotless"
    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }


    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:3.4.4"
        }
    }

    dependencies {
        //lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        implementation 'org.springframework.boot:spring-boot-starter-logging' // lombok @Slf4j를 위한 설정

        //h2
        runtimeOnly 'com.h2database:h2'

        //test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    test {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
            showExceptions true
            showCauses true
            showStackTraces true
        }
    }

    spotless {
        java {
            eclipse().configFile("${rootDir}/config/formatter/eclipse-java-formatter.xml")
            trimTrailingWhitespace()
            indentWithSpaces(4)
            endWithNewline()
            removeUnusedImports()
            importOrder(
                    'java',
                    'javax',
                    'org',
                    'com',
                    '',
                    'static'
            )
            target 'src/**/*.java'
            toggleOffOn()
        }
    }

    checkstyle {
        toolVersion = '10.23.0' // 원하는 버전 사용
        configFile = rootProject.file("config/checkstyle/checkstyle.xml") // 설정 파일 경로
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.required = false
            html.required = true
        }
    }

    sourceSets {
        test {
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.13"
}

tasks.register("jacocoRootReport", JacocoReport) {
    dependsOn subprojects.test

    executionData.from(
            fileTree(project.rootDir.absolutePath) {
                include("**/build/jacoco/test.exec")
            }
    )

    def mainSrcDirs = files()
    def classDirs = files()

    subprojects.each { subproject ->
        if (subproject.plugins.hasPlugin("jacoco")) {
            def sourceSet = subproject.extensions.findByName("sourceSets")?.main
            if (sourceSet) {
                mainSrcDirs += files(sourceSet.allSource.srcDirs)
                classDirs += files(sourceSet.output)
            }
        }
    }

    sourceDirectories.from(mainSrcDirs)
    classDirectories.from(classDirs)

    reports {
        html.required.set(true)
        xml.required.set(true)
    }

    group = "verification"
    description = "Generates an aggregated JaCoCo coverage report for all subprojects."
}
